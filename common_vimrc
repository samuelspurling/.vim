set background=dark
set backspace=indent,eol,start
set fileencodings=ucs-bom,utf-8,default,latin1
set helplang=en
set history=700
set undolevels=700
set nomodeline
set printoptions=paper:a4
set ruler
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc
set termencoding=utf-8
set window=25
" vim: set ft=vim :
set hlsearch
set nu " rnu
set ai
"set nobackup
"set noswapfile
let g:fuzzy_ignore = "*.png;*.PNG;*.JPG;*.jpg;*.GIF;*.gif;vendor/**;coverage/**;tmp/**;rdoc/**"
" set pastetoggle=<F2>
set clipboard=unnamed
set smartcase
set ignorecase
set incsearch
let g:pymode_rope = 0
"set tabstop=4 softtabstop=4 shiftwidth=4
set noet ci pi sts=0 sw=4 ts=4 "Indent with tabs, align with spaces
" highlight Test ctermbg=black guibg=black
" match Test /\t/
" disable distributed ftplugins
let b:did_ftplugin=1
"filetype plugin on
" set omnifunc=pythoncomplete#Complete
nmap <Space> i_<Esc>r
map <F5> :syntax sync fromstart<CR>
map <F7> :tabp<CR>
map <F8> :tabn<CR>
map <Leader>pw ciw<C-r>0<Esc>
map <Leader>p' ci'<C-r>0<Esc>
map <Leader>p" ci"<C-r>0<Esc>
map <Leader>p( ci(<C-r>0<Esc>
map <Leader>p{ ci{<C-r>0<Esc>
map <Leader>p[ ci[<C-r>0<Esc>
map <Leader>pp "0p
map <Leader>op o<C-r>0<Esc>
map <Leader>nt :NERDTree %:h<CR>
nnoremap <buffer> <F9> :exec '!python' shellescape(@%, 1)<cr>
" map <C-s> :w<CR><Esc>
iab docid document.getElementById('')<Esc>hh
" set listchars=tab:▸\ ,eol:¬
set listchars=tab:\|\ 
set list
call pathogen#infect()
autocmd BufEnter *.aspx,*.html,*.js,*.py,*.map :syntax sync fromstart
autocmd BufEnter *.aspx,*.html,*.js,*.py,*.map :highlight ExtraWhitespace ctermbg=red guibg=red
autocmd BufEnter *.aspx,*.html,*.js,*.py,*.map :match ExtraWhitespace /^\t*\zs \+\ze\t\+\|\s\+$/
set foldcolumn=1
set spelllang=en_gb
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadBraces
set cursorline
set cursorcolumn
set laststatus=2
if version >= 700
  au InsertEnter * hi StatusLine ctermfg=15 ctermbg=0 guifg=white guibg=black
  au InsertLeave * hi StatusLine ctermfg=0 ctermbg=15 guifg=#455354 guibg=white
endif
"set statusline+=%#warningmsg#
"set statusline+=%{SyntasticStatuslineFlag()}
"set statusline+=%*
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
let g:syntastic_quiet_messages = { "regex": [
\	"attr-value-double-quotes",
\	"title-require",
\	"spec-char-escape",
\	"id-unique",
\	"cell-var-from-loop",
\	"Exactly one space",
\	"Final newline",
\	"Line too long",
\	"Too many",
\	"bad-whitespace",
\	"bare-except",
\	"broad-except",
\	"docstring",
\	"indentation with tabs",
\	"invalid-name",
\	"multiple-statements",
\	"parens after 'print'",
\	"picamera",
\	"wrong-import-order",
\	"is already defined",
\	"is better written in dot notation",
\	"redefined-outer-name"
\] }
let g:syntastic_html_checkers = ['htmlhint', 'jshint']
let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_python_flake8_args='--ignore=E101,E111,E112,E113,E114,E115,E116,E121,E122,E123,E124,E125,E126,E127,E128,E129,E131,E133,E201,E202,E203,E211,E221,E222,E223,E224,E225,E226,E227,E228,E231,E241,E242,E251,E261,E262,E265,E266,E271,E272,E273,E274,E301,E302,E303,E304,E401,E402,E501,E502,E701,E702,E703,E704,E711,E712,E713,E714,E721,E731,E901,E902,W191,W291,W292,W293,W391,W503,W601,W602,W603,W604'
let g:syntastic_auto_loc_list = 0
syntax on
set showcmd		" display incomplete commands
set wildmenu
set lazyredraw
inoremap jk <esc>
map <silent> <leader>cf :call writefile([], expand("<cfile>"), "t")<cr>
set scrolloff=5
" after search, scroll screen to centre
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
" make paren highlighting more obvious
hi MatchParen cterm=bold ctermbg=darkgrey ctermfg=lightgrey
" make Y do y$ instead of yy
nnoremap Y y$
" keep multi-cursor after escape from insert
let g:multi_cursor_exit_from_insert_mode = 0
" allow timeout on 'j' when in insert mode
let g:multi_cursor_insert_maps={'j':1}
" look for tags file in parent directories (;)
set tags=./tags;
"nnoremap <leader>j :lnext<cr>
function! GotoNextError()
	try
		lnext
	catch
		lfirst
	endtry
endfunction
nnoremap <leader>j :call GotoNextError()<cr>
nnoremap <leader>k :lprev<cr>
nnoremap <leader>l :cnext<cr>
nnoremap <leader>h :cprev<cr>
" working directory, r=repo a=ancestor
let g:ctrlp_working_path_mode = 'ra'
" gf enhancements
set suffixesadd+=.py
" find next line at current indentation
"nnoremap <silent> <leader>, :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%<' . line('.') . 'l\S', 'be')<CR>
"nnoremap <silent> <leader>. :call search('^'. matchstr(getline('.'), '\(^\s*\)') .'\%>' . line('.') . 'l\S', 'e')<CR>
function! NextSameWhitespace(direction,start,invert)
	if line('.') < line("'>")
		return 1
	endif
	let l:resetwrapscan = 0
	if &wrapscan
		let l:resetwrapscan = 1
		set nowrapscan
	endif
	let numLeadingSpacesTabs = strlen(substitute(getline('.'), '^\([ \t]*\).*$', '\1', ''))
	let l:theCommand = '^'
	let i = 1
	while i <= numLeadingSpacesTabs
		let l:theCommand .= '\s'
		let i += 1
	endwhile
	let l:theCommand .= '\S'
	if a:direction == 'f'
		if a:invert == 0
			silent! exe "normal " . a:start . "/" . l:theCommand . "\<cr>"
		endif
		if a:invert == 1
			silent! exe "normal " . a:start . "/^\\(\\(" . l:theCommand . "\\)\\@!.\\)*$\<cr>"
		endif
	endif
	if a:direction == 'b'
		if a:invert == 0
			silent! exe "normal 0" . a:start . "?" . l:theCommand . "\<cr>"
		endif
		if a:invert == 1
			silent! exe "normal 0" . a:start . "?^\\(\\(" . l:theCommand . "\\)\\@!.\\)*$\<cr>"
		endif
	endif
	if l:resetwrapscan == 1
		set wrapscan
	endif
endfunction
nnoremap <silent> <leader>, :call NextSameWhitespace('b','',0)<cr>
vnoremap <silent> <leader>, :call NextSameWhitespace('b','gv',0)<cr>
nnoremap <silent> <leader>. :call NextSameWhitespace('f','',0)<cr>
vnoremap <silent> <leader>. :call NextSameWhitespace('f','gv',0)<cr>

nnoremap <silent> <leader><leader>, :call NextSameWhitespace('b','',1)<cr>
vnoremap <silent> <leader><leader>, :call NextSameWhitespace('b','gv',1)<cr>
nnoremap <silent> <leader><leader>. :call NextSameWhitespace('f','',1)<cr>
vnoremap <silent> <leader><leader>. :call NextSameWhitespace('f','gv',1)<cr>
cnoremap %% <C-R>=expand('%:h').'/'<CR>
" see changes made before saving
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r ++edit # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif
" invert word
function! InvertWord()
	if expand("<cfile>") ==# 'true'
		normal ciwfalse
	elseif expand("<cfile>") ==# 'false'
		normal ciwtrue
	elseif expand("<cfile>") ==# 'True'
		normal ciwFalse
	elseif expand("<cfile>") ==# 'False'
		normal ciwTrue
	elseif expand("<cfile>") ==# 'up'
		normal ciwdown
	elseif expand("<cfile>") ==# 'down'
		normal ciwup
	elseif expand("<cfile>") ==# 'left'
		normal ciwright
	elseif expand("<cfile>") ==# 'right'
		normal ciwleft
	elseif expand("<cfile>") ==# 'absolute'
		normal ciwrelative
	elseif expand("<cfile>") ==# 'relative'
		normal ciwabsolute
	elseif expand("<cfile>") ==# 'block'
		normal ciwhidden
	elseif expand("<cfile>") ==# 'hidden'
		normal ciwblock
	elseif expand("<cfile>") ==# 'class='
		normal ciwid
	elseif expand("<cfile>") ==# 'id='
		normal ciwclass
	elseif expand("<cfile>") ==# 'ON'
		normal ciwOFF
	elseif expand("<cfile>") ==# 'OFF'
		normal ciwON
	elseif expand("<cfile>") ==# 'on'
		normal ciwoff
	elseif expand("<cfile>") ==# 'off'
		normal ciwon
	else
		echo 'invert '.expand("<cfile>").'?'
	endif
endfunction
map <silent> <leader>s :call InvertWord()<cr>
set vb
" Show EOL type and last modified timestamp, right after the filename
"set statusline=%<%F%h%m%r\ [%{&ff}]\ (%{strftime(\"%H:%M\ %d/%m/%Y\",getftime(expand(\"%:p\")))})%=%l,%c%V\ %P
"set statusline+=%{fugitive#statusline()}
" decode url
nnoremap <leader>u :s/%3a/:/g<cr>:s/%2f/\\/g<cr>:s/%2c/,/g<cr>
nnoremap <leader>ue :s/%3a/:/g<cr>:s/%2f/\\/g<cr>:s/%2c/,/g<cr>:s/&/\\&/g<cr>:s/?/\\?/g<cr>
nnoremap <leader>i :bn<cr>
nnoremap <leader>o :bp<cr>
nnoremap Q :q<cr>
vnoremap <leader>a: :Tabularize /:<cr>
vnoremap <leader>a; :Tabularize /:<cr>
vnoremap <leader>a= :Tabularize /=<cr>
vnoremap <leader>a[ :Tabularize /{<cr>
set nowrapscan
" don't break long lines when typing
set textwidth=0
set wrapmargin=0
"let g:validator_python_flake8_args = '--ignore=W191,E501'
"let b:syntastic_skip_checks = 1
"let g:syntastic_mode_map = {
"	\ "mode": "active",
"	\ "active_filetypes": [],
"	\ "passive_filetypes": ["python", "javascript"] }

set diffopt+=iwhite
set diffexpr=DiffW()
function DiffW()
  let opt = ""
   if &diffopt =~ "icase"
     let opt = opt . "-i "
   endif
   if &diffopt =~ "iwhite"
     let opt = opt . "-w " " swapped vim's -b with -w
   endif
   silent execute "!diff -a --binary " . opt .
     \ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
endfunction

" Simple re-format for minified Javascript
command! UnMinify call UnMinify()
function! UnMinify()
    %s/{\ze[^\r\n]/{\r/g
    %s/){/) {/g
    %s/};\?\ze[^\r\n]/\0\r/g
    %s/;\ze[^\r\n]/;\r/g
    %s/[^\s]\zs[=&|]\+\ze[^\s]/ \0 /g
    normal ggVG=
endfunction

command -range=% Json <line1>,<line2>!python -m json.tool
