snippet /json
	print "Content-type: application/json\n"
snippet /plain
	print "Content-type: text/plain; charset=iso-8859-1\n"
snippet gpg
	import base64
	import subprocess

	def gpg(passphrase,the_data,direction='c'):
		# direction - c=encrypt, d=decrypt
		command = 'gpg --passphrase %s -%s'%(passphrase,direction)
		process = subprocess.Popen(\
			command,\
			shell=True,\
			stdin=subprocess.PIPE,\
			stdout=subprocess.PIPE,\
			stderr=subprocess.PIPE\
		)
		process_stdout,process_stderr = process.communicate(input=the_data)
		return process_stdout

	encoded = base64.b64encode(gpg('1234', 'this is a test', 'c'))
	print 'encoded:', encoded
	print 'gpg:', gpg('1234',base64.b64decode(encoded),'d')
snippet popen
	import subprocess
	command = '${1}'
	process = subprocess.Popen(\
		command,\
		shell=True,\
		stdin=subprocess.PIPE,\
		stdout=subprocess.PIPE,\
		stderr=subprocess.PIPE\
	)
	process_stdout,process_stderr = process.communicate(input=${2:''})
snippet process
	from multiprocessing import Process
	def ${1:function}(${2:arg}):
		${3}
	p1 = Process(target=$1, args=($2,))
	p1.start()
	p1.join()
snippet thread
	from threading import Thread
	def ${1:function}(${2:arg}):
		${3}
	t1 = Thread(target=$1, args=($2,))
	t1.start()
	t1.join()
snippet psyco
	print "Content-type: application/json\n"
	#print "Content-type: text/plain; charset=iso-8859-1\n\n"
	
	from os import environ
	import cgi
	import psycopg2
	import json
	from ConfigParser import SafeConfigParser
	
	parser = SafeConfigParser()
	parser.read('config.ini')
	
	arguments = cgi.FieldStorage()
	
	${1:feature} = str(arguments['${2:$1}'].value)
	
	conn_string = "host='' dbname='' user='' password=''"
	conn = psycopg2.connect(conn_string)
	cur = conn.cursor()
	
	sql = '''
	${3}
	'''
	params = \
	(\
		$2,\
	)
	cur.execute(sql, params)
	#result = cur.fetchone()
	result = cur.fetchall()
	conn.commit()
	cur.close()
	conn.close()
	print json.dumps(\
	{\
		'exit_status': 'done',\
	})
snippet sql
	sql = '''
	${1}
	'''
	params = \
	{\
		'${2:change_id}': $2,\
	}
snippet ex
	cur.execute(${1:sql},${2:params})
	result = cur.fetchall()

snippet logfile
	with open('log_file.txt','a') as log_file:
		log_file.write(${1:sql % params})

snippet logdef
	def logerror(e_params,error):
		with open(parser.get('log', 'logpath') + str(uuid4()) + '.txt','a') as log_file:
			log_file.write(str(datetime.datetime.now()) + '\n')
			log_file.write(environ['REMOTE_USER'] + '\n')
			log_file.write('`Filename()`.py')
			log_file.write('### PARAMS ###\n')
			log_file.write(str(e_params) + '\n')
			log_file.write('### ERROR ###\n')
			log_file.write(str(error) + '\n')
			log_file.write('-----------------------------------\n\n')

snippet logtryone
	try:
		cur.execute(sql, params)
		result = cur.fetchone()
		if result[0] is not None:
			${1}
	except Exception, e:
		logerror(sql % params,e)

snippet logtryall
	try:
		cur.execute(sql, params)
		result = cur.fetchall()
		if len(result) > 0:
			for x in result:
				${1}
	except Exception, e:
		logerror(sql % params,e)

snippet remu
	environ['REMOTE_USER']
snippet breakpoint
	import pdb; pdb.set_trace()
